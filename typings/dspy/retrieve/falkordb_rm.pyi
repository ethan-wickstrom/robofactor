"""
This type stub file was generated by pyright.
"""

import backoff
from typing import List, Optional, Union
from openai import APITimeoutError, InternalServerError, RateLimitError, UnprocessableEntityError
from dspy import Prediction, Retrieve
from dspy.dsp.utils.settings import settings

def generate_random_string(length: int) -> str: ...

class Embedder:
    def __init__(self, provider: str, model: str) -> None: ...
    @backoff.on_exception(
        backoff.expo,
        (APITimeoutError, InternalServerError, RateLimitError, UnprocessableEntityError),
        max_time=settings.backoff_time,
    )
    def __call__(self, queries: Union[str, List[str]]) -> List[List[float]]: ...

DEFAULT_INDEX_QUERY = ...

class FalkordbRM(Retrieve):
    """
    Implements a retriever that utilizes FalkorDB for retrieving passages.
    This class manages a connection to a FalkorDB database using official FalkorDB Python drivers and requires
    the database credentials. That is, if using a local FalkorDB session, host and port else if using a FalkorDB cloud session,
    host, port, username, and password to be set as environment variables and optionally the database name.
    Additionally, it utilizes an embedding provider (defaulting to OpenAI's services) to compute query embeddings,
    which are then used to find the most relevant nodes in the FalkorDB graph based on the specified node property or custom retrieval query.

    Returns a list of passages in the form of `dspy.Prediction` objects

    Args:
        Args:
        node_label (str): The label of the node in the FalkorDB database to query against
        text_node_property (str): The property of the node containing the text.
        embedding_node_property (List[float]): The property of the node containing the embeddings.
        k (Optional[int]): The default number of top passages to retrieve. Defaults to 5.
        retrieval_query (Optional[str]): Custom Cypher query for retrieving passages.
        embedding_provider (str): The provider of the embedding service. Defaults to "openai".
        embedding_model (str): The model identifier for generating embeddings. Defaults to "text-embedding-ada-002".

    Examples:
        Below is a code snippet showcasing how to initialize FalkordbRM with environment variables for the database connection and OpenAI as the embedding provider:

        ```python
        import os

        import dspy
        import openai

        os.environ["FALKORDB_HOST"] = "localhost"
        os.environ["FALORDB_PORT"] = "6379"
        os.environ["OPENAI_API_KEY"] = "sk-" (Only if using openai as embedding's provider)

        # Uncomment and set the following if you are using FalkorDB cloud
        # os.environ["FALKORDB_USERNAME"] = "falkordb"
        # os.environ["FALKORDB_PASSWORD"] = "password"


        falkordb_retriever = FalkordbRM(
            node_label="myIndex",
            text_node_property="text",
            k=10,
            embedding_provider="openai",
            embedding_model="text-embedding-ada-002",
        )

        dspy.settings.configure(rm=falkordb_retriever)
        ```

        In this example, `FalkordbRM` is configured to retrieve nodes based on the "text" property from an index on a node labeled "myIndex",
        using embeddings computed by OpenAI's "text-embedding-ada-002" model.
    """
    def __init__(
        self,
        node_label: str,
        text_node_property: str = ...,
        embedding_node_property: str = ...,
        k: int = ...,
        retrieval_query: Optional[str] = ...,
        embedding_provider: str = ...,
        embedding_model: str = ...,
    ) -> None: ...
    def forward(self, query_or_queries: Union[str, List[str]], k: Optional[int]) -> Prediction: ...
