"""
This type stub file was generated by pyright.
"""

import dspy
from typing import Any, Optional, Type, Union
from pydantic import BaseModel

class SnowflakeRM(dspy.Retrieve):
    """A retrieval module that uses Snowflake's Cortex Search service to return the top relevant passages for a given query.

    Assumes that a Snowflake Cortex Search endpoint has been configured by the use.

    For more information on configuring the Cortex Search service, visit: https://docs.snowflake.com/en/user-guide/snowflake-cortex/cortex-search/cortex-search-overview

    Args:
        snowflake_session (object): Snowflake Snowpark session for accessing the service.
        cortex_search_service(str): Name of the Cortex Search service to be used.
        snowflake_database (str): The name of the Snowflake table containing document embeddings.
        snowflake_schema (str): The name of the Snowflake table containing document embeddings.
        auto_filter (bool): Auto generate metadata filter based on user query and push it down prior to retrieving Cortex Search results.
        k (int, optional): The default number of top passages to retrieve. Defaults to 3.
    """
    def __init__(
        self,
        snowflake_session: object,
        cortex_search_service: str,
        snowflake_database: str,
        snowflake_schema: str,
        auto_filter=...,
        k: int = ...,
        max_retries=...,
    ) -> None: ...
    def forward(
        self,
        query_or_queries: Union[str, list[str]],
        retrieval_columns: list[str],
        filter: Optional[dict] = ...,
        k: Optional[int] = ...,
    ) -> dspy.Prediction:
        """Query Cortex Search endpoint for top k relevant passages.
        Args:
            query_or_queries (Union[str, List[str]]): The query or queries to search for.
            retrieval_columns (List[str]): Columns to include in response.
            filter (Optional[json]):Filter query.
            k (Optional[int]): The number of top passages to retrieve. Defaults to self.k.
        Returns:
            dspy.Prediction: An object containing the retrieved passages.
        """
        ...

class JSONFilter(BaseModel):
    answer: str = ...
    @classmethod
    def model_validate_json(
        cls, json_data: str, *, strict: bool | None = ..., context: dict[str, Any] | None = ...
    ):  # -> Any:
        ...

class GenerateFilter(dspy.Signature):
    """
    Given a query, attributes in the data, and example values of each attribute, generate a filter in valid JSON format.
    Ensure the filter only uses valid operators: @eq, @contains,@and,@or,@not
    Ensure only the valid JSON is output with no other reasoning.

    ---
    Query: What was the sentiment of CEOs between 2021 and 2024?
    Attributes: industry,hq,date
    Sample Values: {"industry":["biotechnology","healthcare","agriculture"],"HQ":["NY, US","CA,US","FL,US"],"date":["01/01,1999","01/01/2024"]}
    Answer: {"@or":[{"@eq":{"year":"2021"}},{"@eq":{"year":"2022"}},{"@eq":{"year":"2023"}},{"@eq":{"year":"2024"}}]}

    Query: What is the sentiment of Biotech CEO's of companies based in New York?
    Attributes: industry,hq,date
    Sample Values: {"industry":["biotechnology","healthcare","agriculture"],"HQ":["NY, US","CA,US","FL,US"],"date":["01/01,1999","01/01/2024"]}
    Answer: {"@and": [ { "@eq": { "industry"": "biotechnology" } }, { "@eq": { "HQ": "NY,US" } }]}

    Query: What is the sentiment of Biotech CEOs outside of California?
    Attributes: industry,hq,date
    Sample Values: {"industry":["biotechnology","healthcare","agriculture"],"HQ":["NY, US","CA,US","FL,US"],"date":["01/01,1999","01/01/2024"]}
    Answer: {"@and":[{ "@eq": { "industry": "biotechnology" } },{"@not":{"@eq":{"HQ":"CA,US"}}}]}

    Query: What is the sentiment of Biotech CEOs outside of California?
    Attributes: industry,hq,date
    Sample Values: {"industry":["biotechnology","healthcare","agriculture"],"HQ":["NY, US","CA,US","FL,US"],"date":["01/01,1999","01/01/2024"]}
    Answer: {"@and":[{ "@eq": { "industry": "biotechnology" } },{"@not":{"@eq":{"HQ":"CA,US"}}}]}

    Query: What is sentiment towards ag and biotech companies based outside of the US?
    Attributes: industry,hq,date
    Sample Values: {"industry"":["biotechnology","healthcare","agriculture"],"COUNTRY":["United States","Ireland","Russia","Georgia","Spain"],"month":["01","02","03","06","11","12""],""year"":["2022","2023","2024"]}
    Answer:{"@and": [{ "@or": [{"@eq":{ "industry": "biotechnology" } },{"@eq":{"industry":"agriculture"}}]},{ "@not": {"@eq": { "COUNTRY": "United States" } }}]}

    """

    query = ...
    attributes = ...
    sample_values = ...
    answer: JSONFilter = ...

class SmartSearch(dspy.Module):
    def __init__(self) -> None: ...
    def forward(self, query, attributes, sample_values): ...

def get_min_length(model: Type[BaseModel]):  # -> int:
    ...
