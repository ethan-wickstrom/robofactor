"""
This type stub file was generated by pyright.
"""

import dspy
from typing import Callable, List, Optional, Union

"""
Retriever model for Milvus or Zilliz Cloud
"""

def openai_embedding_function(texts: List[str]):  # -> list[List[float]]:
    ...

class MilvusRM(dspy.Retrieve):
    """
    A retrieval module that uses Milvus to return passages for a given query.

    Assumes that a Milvus collection has been created and populated with the following field:
        - text: The text of the passage

    Args:
        collection_name (str): The name of the Milvus collection to query against.
        uri (str, optional): The Milvus connection uri. Defaults to "http://localhost:19530".
        token (str, optional): The Milvus connection token. Defaults to None.
        db_name (str, optional): The Milvus database name. Defaults to "default".
        embedding_function (callable, optional): The function to convert a list of text to embeddings.
            The embedding function should take a list of text strings as input and output a list of embeddings.
            Defaults to None. By default, it will get OpenAI client by the environment variable OPENAI_API_KEY
            and use OpenAI's embedding model "text-embedding-3-small" with the default dimension.
        k (int, optional): The number of top passages to retrieve. Defaults to 3.

    Returns:
        dspy.Prediction: An object containing the retrieved passages.

    Examples:
        Below is a code snippet that shows how to use this as the default retriever:
        ```python
        llm = dspy.OpenAI(model="gpt-3.5-turbo")
        retriever_model = MilvusRM(
            collection_name="<YOUR_COLLECTION_NAME>",
            uri="<YOUR_MILVUS_URI>",
            token="<YOUR_MILVUS_TOKEN>"
            )
        dspy.settings.configure(lm=llm, rm=retriever_model)
        ```

        Below is a code snippet that shows how to use this in the forward() function of a module
        ```python
        self.retrieve = MilvusRM(k=num_passages)
        ```
    """
    def __init__(
        self,
        collection_name: str,
        uri: Optional[str] = ...,
        token: Optional[str] = ...,
        db_name: Optional[str] = ...,
        embedding_function: Optional[Callable] = ...,
        k: int = ...,
    ) -> None: ...
    def forward(
        self, query_or_queries: Union[str, List[str]], k: Optional[int] = ...
    ) -> dspy.Prediction: ...
