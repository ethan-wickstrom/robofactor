"""
This type stub file was generated by pyright.
"""

import backoff
import lancedb
from typing import List, Union
from dspy import Prediction, Retrieve
from dspy.dsp.utils.settings import settings

"""
Retriever model for LanceDB
Author: Prashant Dixit (@PrashantDixit0)
"""
if lancedb is None: ...
OPENAI_LEGACY = ...
ERRORS = ...

class LancedbRM(Retrieve):
    """
    A retrieval module that uses LanceDB to return the top passages for a given query.

    Assumes that the LanceDB table has been created and populated with the following metadata:
        - text: The text of the passage

    Args:
        table_name (str): The name of the table to query against.
        persist_directory (str): directory where database is stored.
        k (int, optional): The number of top passages to retrieve. Defaults to 3.

    Returns:
        dspy.Prediction: An object containing the retrieved passages.

    Examples:
        Below is a code snippet that shows how to use this as the default retriever:
        ```python
        llm = dspy.OpenAI(model="gpt-3.5-turbo")
        retriever_model = LancedbRM()
        dspy.settings.configure(lm=llm, rm=retriever_model)
        ```

        Below is a code snippet that shows how to use this in the forward() function of a module
        ```python
        self.retrieve = LancedbRM(k=num_passages)
        ```
    """
    def __init__(self, table_name: str, persist_directory: str, k: int = ...) -> None: ...
    @backoff.on_exception(backoff.expo, ERRORS, max_time=settings.backoff_time)
    def forward(self, query_or_queries: Union[str, List[str]]) -> Prediction:
        """Search with Lancedb for self.k top passages for query

        Args:
            query_or_queries (Union[str, List[str]]): The query or queries to search for.

        Returns:
            dspy.Prediction: An object containing the retrieved passages.
        """
        ...
