"""
This type stub file was generated by pyright.
"""

import dspy
from typing import Callable
from dspy.teleprompt.teleprompt import Teleprompter

logger = ...

class SIMBA(Teleprompter):
    def __init__(
        self,
        *,
        metric: Callable,
        bsize=...,
        num_candidates=...,
        max_steps=...,
        max_demos=...,
        demo_input_field_maxlen=...,
        num_threads=...,
        temperature_for_sampling=...,
        temperature_for_candidates=...,
    ) -> None:
        """
        Initializes SIMBA.

        Args:
            metric (Callable): A function that takes an Example and a prediction_dict
                as input and returns a float.
            bsize (int, optional): Mini-batch size. Defaults to 32.
            num_candidates (int, optional): Number of new candidate programs to produce
                per iteration. Defaults to 6.
            max_steps (int, optional): Number of optimization steps to run. Defaults to 8.
            max_demos (int, optional): Maximum number of demos a predictor can hold
                before dropping some. Defaults to 4.
            demo_input_field_maxlen (int, optional): Maximum number of characters to keep
                in an input field when building a new demo. Defaults to 100,000.
            num_threads (int, optional): Number of threads for parallel execution.
                Defaults to None.
            temperature_for_sampling (float, optional): Temperature used for picking
                programs during the trajectory-sampling step. Defaults to 0.2.
            temperature_for_candidates (float, optional): Temperature used for picking
                the source program for building new candidates. Defaults to 0.2.
        """
        ...

    def compile(
        self, student: dspy.Module, *, trainset: list[dspy.Example], seed: int = ...
    ):  # -> Module:
        ...
