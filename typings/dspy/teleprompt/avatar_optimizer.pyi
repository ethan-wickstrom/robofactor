"""
This type stub file was generated by pyright.
"""

import dspy
from typing import Callable, List, Optional
from pydantic import BaseModel
from dspy.predict.avatar import ActionOutput
from dspy.teleprompt.teleprompt import Teleprompter

DEFAULT_MAX_EXAMPLES = ...

class EvalResult(BaseModel):
    example: dict
    score: float
    actions: Optional[List[ActionOutput]] = ...

class Comparator(dspy.Signature):
    """After executing the given actions on user inputs using the given instruction, some inputs have yielded good, results, while others have not. I'll provide you the inputs along with their, corresponding evaluation metrics:

    Task:
    (1) Firstly, identify and contrast the patterns of inputs that have achieved good results with those that have not.
    (2) Then, review the computational logic for any inconsistencies in the previous actions.
    (3) Lastly, specify the modification in tools used that can lead to improved performance on the negative inputs."""

    instruction: str = ...
    actions: List[str] = ...
    pos_input_with_metrics: List[EvalResult] = ...
    neg_input_with_metrics: List[EvalResult] = ...
    feedback: str = ...

class FeedbackBasedInstruction(dspy.Signature):
    """There is a task that needs to be completed for which one can use multiple tools to achieve the desired outcome. A group's performance was evaluated on a dataset of inputs, the inputs that did well are positive inputs, and the inputs that did not do well are negative inputs.

    You received feedback on how they can better use the tools to improve your performance on the negative inputs. You have been provided with the previous instruction, that they followed to use tools to complete the task, and the feedback on your performance.

    Your task is to incorporate the feedback and generate a detailed instruction for the group to follow to improve their performance on the task.

    Make sure that the new instruction talks about how to use the tools effectively and should be no more than 3 paragraphs long. The previous instruction contains general guidelines that you must retain in the new instruction."""

    previous_instruction: str = ...
    feedback: str = ...
    new_instruction: str = ...

class AvatarOptimizer(Teleprompter):
    def __init__(
        self,
        metric: Callable,
        max_iters: int = ...,
        lower_bound: int = ...,
        upper_bound: int = ...,
        max_positive_inputs: Optional[int] = ...,
        max_negative_inputs: Optional[int] = ...,
        optimize_for: str = ...,
    ) -> None: ...
    def process_example(
        self, actor, example, return_outputs
    ):  # -> tuple[Any, Any, Any] | tuple[Any, None, Literal[0]] | Literal[0]:
        ...
    def thread_safe_evaluator(
        self, devset, actor, return_outputs=..., num_threads=...
    ):  # -> tuple[Any | float, list[Any]] | float:
        ...
    def compile(self, student, *, trainset): ...
