"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional, TYPE_CHECKING
from litellm import ModelResponseStream
from dspy.primitives.program import Module

if TYPE_CHECKING: ...

class StreamListener:
    """Class that listens to the stream to capture the streeaming of a specific output field of a predictor."""
    def __init__(
        self, signature_field_name: str, predict: Any = ..., predict_name: Optional[str] = ...
    ) -> None:
        """
        Args:
            signature_field_name: The name of the field to listen to.
            predict: The predictor to listen to. If None, when calling `streamify()` it will automatically look for
                the predictor that has the `signature_field_name` in its signature.
            predict_name: The name of the predictor to listen to. If None, when calling `streamify()` it will
                automatically look for the predictor that has the `signature_field_name` in its signature.
        """
        ...

    def receive(self, chunk: ModelResponseStream):  # -> StreamResponse | None:
        ...
    def flush(self) -> str:
        """Flush all tokens in the field end queue.

        This method is called to flush out the last a few tokens when the stream is ended. These tokens
        are in the buffer because we don't directly yield the tokens received by the stream listener
        with the purpose to not yield the end_identifier tokens, e.g., "[[ ## ... ## ]]" for ChatAdapter.
        """
        ...

def find_predictor_for_stream_listeners(
    program: Module, stream_listeners: List[StreamListener]
):  # -> defaultdict[Any, list[Any]]:
    """Find the predictor for each stream listener.

    This is a utility function to automatically find the predictor for each stream listener. It is used when some
    listeners don't specify the predictor they want to listen to. If a listener's `signature_field_name` is not
    unique in the program, this function will raise an error.
    """
    ...
