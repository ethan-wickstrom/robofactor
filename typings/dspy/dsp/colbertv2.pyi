"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional, Union
from dspy.clients.cache import request_cache
from dspy.dsp.utils import dotdict

class ColBERTv2:
    """Wrapper for the ColBERTv2 Retrieval."""
    def __init__(self, url: str = ..., port: Optional[Union[str, int]] = ..., post_requests: bool = ...) -> None:
        ...
    
    def __call__(self, query: str, k: int = ..., simplify: bool = ...) -> Union[list[str], list[dotdict]]:
        ...
    


@request_cache()
def colbertv2_get_request_v2(url: str, query: str, k: int): # -> list[dict[Any | str, Any]]:
    ...

@request_cache()
def colbertv2_get_request_v2_wrapped(*args, **kwargs): # -> list[dict[Any | str, Any]]:
    ...

colbertv2_get_request = ...
@request_cache()
def colbertv2_post_request_v2(url: str, query: str, k: int): # -> Any:
    ...

@request_cache()
def colbertv2_post_request_v2_wrapped(*args, **kwargs): # -> Any:
    ...

colbertv2_post_request = ...
class ColBERTv2RetrieverLocal:
    def __init__(self, passages: List[str], colbert_config=..., load_only: bool = ...) -> None:
        """Colbertv2 retriever module

        Args:
            passages (List[str]): list of passages
            colbert_config (ColBERTConfig, optional): colbert config for building and searching. Defaults to None.
            load_only (bool, optional): whether to load the index or build and then load. Defaults to False.
        """
        ...
    
    def build_index(self): # -> None:
        ...
    
    def get_index(self):
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...
    
    def forward(self, query: str, k: int = ..., **kwargs): # -> list[Any]:
        ...
    


class ColBERTv2RerankerLocal:
    def __init__(self, colbert_config=..., checkpoint: str = ...) -> None:
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...
    
    def forward(self, query: str, passages: Optional[List[str]] = ...): # -> NDArray[Any]:
        ...
    


