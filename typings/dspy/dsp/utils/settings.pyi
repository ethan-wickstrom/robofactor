"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager

DEFAULT_CONFIG = ...
main_thread_config = ...
config_owner_thread_id = ...
config_owner_async_task = ...
global_lock = ...
thread_local_overrides = ...
class Settings:
    """
    A singleton class for DSPy configuration settings.
    Thread-safe global configuration.
    - 'configure' can be called by only one 'owner' thread (the first thread that calls it).
    - Other threads see the configured global values from 'main_thread_config'.
    - 'context' sets thread-local overrides. These overrides propagate to threads spawned
      inside that context block, when (and only when!) using a ParallelExecutor that copies overrides.

      1. Only one unique thread (which can be any thread!) can call dspy.configure.
      2. It affects a global state, visible to all. As a result, user threads work, but they shouldn't be
         mixed with concurrent changes to dspy.configure from the "main" thread.
         (TODO: In the future, add warnings: if there are near-in-time user-thread reads followed by .configure calls.)
      3. Any thread can use dspy.context. It propagates to child threads created with DSPy primitives: Parallel, asyncify, etc.
    """
    _instance = ...
    def __new__(cls): # -> Self:
        ...
    
    @property
    def lock(self): # -> lock:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def get(self, key, default=...): # -> None:
        ...
    
    def copy(self): # -> dotdict:
        ...
    
    @property
    def config(self): # -> dotdict:
        ...
    
    def configure(self, **kwargs): # -> None:
        ...
    
    @contextmanager
    def context(self, **kwargs): # -> Generator[None, Any, None]:
        """
        Context manager for temporary configuration changes at the thread level.
        Does not affect global configuration. Changes only apply to the current thread.
        If threads are spawned inside this block using ParallelExecutor, they will inherit these overrides.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


settings = ...
