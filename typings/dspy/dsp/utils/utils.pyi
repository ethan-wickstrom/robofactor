"""
This type stub file was generated by pyright.
"""

def print_message(*s, condition=..., pad=..., sep=...):  # -> str:
    ...
def timestamp(daydir=...):  # -> str:
    ...
def file_tqdm(file):  # -> Generator[Any, Any, None]:
    ...
def create_directory(path):  # -> None:
    ...
def deduplicate(seq: list[str]) -> list[str]:
    """
    Source: https://stackoverflow.com/a/480227/1493011
    """
    ...

def batch(group, bsize, provide_offset=...):  # -> Generator[tuple[int, Any] | Any, Any, None]:
    ...

class dotdict(dict):
    def __getattr__(self, key): ...
    def __setattr__(self, key, value):  # -> None:
        ...
    def __delattr__(self, key):  # -> None:
        ...
    def __deepcopy__(self, memo):  # -> dotdict:
        ...

class dotdict_lax(dict):
    __getattr__ = ...
    __setattr__ = ...
    __delattr__ = ...

def flatten(data_list):  # -> list[Any]:
    ...
def zipstar(
    data_list, lazy=...
):  # -> list[list[Any]] | zip[tuple[Any, ...]] | list[tuple[Any, ...]]:
    """
    A much faster A, B, C = zip(*[(a, b, c), (a, b, c), ...])
    May return lists or tuples.
    """
    ...

def zip_first(list1, list2):  # -> list[tuple[Any, Any]]:
    ...
def int_or_float(val):  # -> float | int:
    ...
def groupby_first_item(lst):  # -> defaultdict[Any, list[Any]]:
    ...
def process_grouped_by_first_item(
    lst,
):  # -> Generator[tuple[Any | None, list[Any]], Any, defaultdict[Any, list[Any]]]:
    """
    Requires items in list to already be grouped by first item.
    """
    ...

def grouper(iterable, n, fillvalue=...):  # -> zip_longest[tuple[Any | None, ...]]:
    """
    Collect data into fixed-length chunks or blocks
        Example: grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
        Source: https://docs.python.org/3/library/itertools.html#itertools-recipes
    """
    ...

def lengths2offsets(lengths):  # -> Generator[tuple[Any | Literal[0], Any], Any, None]:
    ...

class NullContextManager:
    def __init__(self, dummy_resource=...) -> None: ...
    def __enter__(self):  # -> None:
        ...
    def __exit__(self, *args):  # -> None:
        ...

def load_batch_backgrounds(args, qids):  # -> list[Any] | None:
    ...
