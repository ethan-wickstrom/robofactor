"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import Union
from dspy.clients.lm import LM
from dspy.utils.callback import with_callbacks

class DummyLM(LM):
    """Dummy language model for unit testing purposes.

    Three modes of operation:

    Mode 1: List of dictionaries

    If a list of dictionaries is provided, the dummy model will return the next dictionary
    in the list for each request, formatted according to the `format_field_with_value` function.

    Example:

    ```
    lm = DummyLM([{"answer": "red"}, {"answer": "blue"}])
    dspy.settings.configure(lm=lm)
    predictor("What color is the sky?")
    # Output:
    # [[## answer ##]]
    # red
    predictor("What color is the sky?")
    # Output:
    # [[## answer ##]]
    # blue
    ```

    Mode 2: Dictionary of dictionaries

    If a dictionary of dictionaries is provided, the dummy model will return the value
    corresponding to the key which is contained with the final message of the prompt,
    formatted according to the `format_field_with_value` function from the chat adapter.

    ```
    lm = DummyLM({"What color is the sky?": {"answer": "blue"}})
    dspy.settings.configure(lm=lm)
    predictor("What color is the sky?")
    # Output:
    # [[## answer ##]]
    # blue
    ```

    Mode 3: Follow examples

    If `follow_examples` is set to True, and the prompt contains an example input exactly equal to the prompt,
    the dummy model will return the output from that example.

    ```
    lm = DummyLM([{"answer": "red"}], follow_examples=True)
    dspy.settings.configure(lm=lm)
    predictor("What color is the sky?, demos=dspy.Example(input="What color is the sky?", output="blue"))
    # Output:
    # [[## answer ##]]
    # blue
    ```

    """
    def __init__(self, answers: Union[list[dict[str, str]], dict[str, dict[str, str]]], follow_examples: bool = ...) -> None:
        ...
    
    @with_callbacks
    def __call__(self, prompt=..., messages=..., **kwargs): # -> list[Any]:
        ...
    
    async def acall(self, prompt=..., messages=..., **kwargs): # -> list[Any]:
        ...
    
    def get_convo(self, index): # -> tuple[Any, Any]:
        """Get the prompt + answer from the ith message."""
        ...
    


def dummy_rm(passages=...) -> callable:
    ...

class DummyVectorizer:
    """Simple vectorizer based on n-grams."""
    def __init__(self, max_length=..., n_gram=...) -> None:
        ...
    
    def __call__(self, texts: list[str]) -> np.ndarray:
        ...
    


