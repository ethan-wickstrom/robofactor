"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, TYPE_CHECKING
from dspy.clients.provider import Provider, TrainingJob
from dspy.clients.utils_finetune import TrainDataFormat
from dspy.clients.lm import LM

if TYPE_CHECKING: ...
logger = ...

class LocalProvider(Provider):
    def __init__(self) -> None: ...
    @staticmethod
    def launch(lm: LM, launch_kwargs: Optional[Dict[str, Any]] = ...):  # -> None:
        ...
    @staticmethod
    def kill(lm: LM, launch_kwargs: Optional[Dict[str, Any]] = ...):  # -> None:
        ...
    @staticmethod
    def finetune(
        job: TrainingJob,
        model: str,
        train_data: List[Dict[str, Any]],
        train_data_format: Optional[TrainDataFormat],
        train_kwargs: Optional[Dict[str, Any]] = ...,
    ) -> str: ...

def create_output_dir(model_name, data_path): ...
def train_sft_locally(model_name, train_data, train_kwargs): ...
def get_free_port() -> int:
    """
    Return a free TCP port on localhost.
    """
    ...

def wait_for_server(base_url: str, timeout: Optional[int] = ...) -> None:
    """
    Wait for the server to be ready by polling the /v1/models endpoint.

    Args:
        base_url: The base URL of the server (e.g. http://localhost:1234)
        timeout: Maximum time to wait in seconds. None means wait forever.
    """
    ...

def encode_sft_example(example, tokenizer, max_seq_length):  # -> dict[str, Any]:
    """
    This function encodes a single example into a format that can be used for sft training.
    Here, we assume each example has a 'messages' field. Each message in it is a dict with 'role' and 'content' fields.
    We use the `apply_chat_template` function from the tokenizer to tokenize the messages and prepare the input and label tensors.

    Code obtained from the allenai/open-instruct repository: https://github.com/allenai/open-instruct/blob/4365dea3d1a6111e8b2712af06b22a4512a0df88/open_instruct/finetune.py
    """
    ...
