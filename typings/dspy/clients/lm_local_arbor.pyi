"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, TYPE_CHECKING, TypedDict, Union
from dspy.clients.provider import Provider, ReinforceJob, TrainingJob
from dspy.clients.utils_finetune import GRPOGroup, TrainDataFormat, TrainingStatus
from dspy.clients.lm import LM

if TYPE_CHECKING: ...

class GRPOTrainKwargs(TypedDict):
    num_generations: int
    ...

class ArborTrainingJob(TrainingJob):
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self):  # -> None:
        ...
    def status(self) -> TrainingStatus: ...

class ArborReinforceJob(ReinforceJob):
    DEFAULT_TRAIN_KWARGS = ...
    def __init__(self, lm: LM, train_kwargs: GRPOTrainKwargs) -> None: ...
    def initialize(self):  # -> None:
        ...
    def step(
        self, train_data: List[GRPOGroup], train_data_format: Optional[Union[TrainDataFormat, str]]
    ):  # -> None:
        ...
    def update_model(self):  # -> None:
        ...
    def save_checkpoint(self, checkpoint_name: str, score: Optional[float] = ...):  # -> None:
        ...
    def terminate(self):  # -> None:
        ...
    def cancel(self):  # -> None:
        ...
    def status(self) -> TrainingStatus: ...

class ArborProvider(Provider):
    def __init__(self) -> None: ...
    @staticmethod
    def launch(lm: LM, launch_kwargs: Optional[Dict[str, Any]] = ...):  # -> None:
        ...
    @staticmethod
    def kill(lm: LM, launch_kwargs: Optional[Dict[str, Any]] = ...):  # -> None:
        ...
    @staticmethod
    def finetune(
        job: ArborTrainingJob,
        model: str,
        train_data: List[Dict[str, Any]],
        train_data_format: Optional[TrainDataFormat],
        train_kwargs: Optional[Dict[str, Any]] = ...,
    ) -> str: ...
    @staticmethod
    def does_job_exist(job_id: str, training_kwargs: Dict[str, Any]) -> bool: ...
    @staticmethod
    def does_file_exist(file_id: str, training_kwargs: Dict[str, Any]) -> bool: ...
    @staticmethod
    def is_terminal_training_status(status: TrainingStatus) -> bool: ...
    @staticmethod
    def get_training_status(job_id: str, training_kwargs: Dict[str, Any]) -> TrainingStatus: ...
    @staticmethod
    def validate_data_format(data_format: TrainDataFormat):  # -> None:
        ...
    @staticmethod
    def upload_data(data_path: str, training_kwargs: Dict[str, Any]) -> str: ...
    @staticmethod
    def wait_for_job(
        job: TrainingJob, training_kwargs: Dict[str, Any], poll_frequency: int = ...
    ):  # -> None:
        ...
    @staticmethod
    def get_trained_model(job, training_kwargs: Dict[str, Any]):  # -> str | None:
        ...
