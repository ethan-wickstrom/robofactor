"""
This type stub file was generated by pyright.
"""

from dspy.utils.callback import with_callbacks

MAX_HISTORY_SIZE = ...
GLOBAL_HISTORY = ...

class BaseLM:
    """Base class for handling LLM calls.

    Most users can directly use the `dspy.LM` class, which is a subclass of `BaseLM`. Users can also implement their
    own subclasses of `BaseLM` to support custom LLM providers and inject custom logic. To do so, simply override the
    `forward` method and make sure the return format is identical to the
    [OpenAI response format](https://platform.openai.com/docs/api-reference/responses/object).

    Example:

    ```python
    from openai import OpenAI

    import dspy


    class MyLM(dspy.BaseLM):
        def forward(self, prompt, messages=None, **kwargs):
            client = OpenAI()
            return client.chat.completions.create(
                model=self.model,
                messages=messages or [{"role": "user", "content": prompt}],
                **self.kwargs,
            )


    lm = MyLM(model="gpt-4o-mini")
    dspy.configure(lm=lm)
    print(dspy.Predict("q->a")(q="Why did the chicken cross the kitchen?"))
    ```
    """
    def __init__(
        self, model, model_type=..., temperature=..., max_tokens=..., cache=..., **kwargs
    ) -> None: ...
    @with_callbacks
    def __call__(self, prompt=..., messages=..., **kwargs):  # -> list[Any]:
        ...
    @with_callbacks
    async def acall(self, prompt=..., messages=..., **kwargs):  # -> list[Any]:
        ...
    def forward(self, prompt=..., messages=..., **kwargs):
        """Forward pass for the language model.

        Subclasses must implement this method, and the response should be identical to
        [OpenAI response format](https://platform.openai.com/docs/api-reference/responses/object).
        """
        ...

    async def aforward(self, prompt=..., messages=..., **kwargs):
        """Async forward pass for the language model.

        Subclasses that support async should implement this method, and the response should be identical to
        [OpenAI response format](https://platform.openai.com/docs/api-reference/responses/object).
        """
        ...

    def copy(self, **kwargs):  # -> Self:
        """Returns a copy of the language model with possibly updated parameters."""
        ...

    def inspect_history(self, n: int = ...):  # -> None:
        ...
    def update_global_history(self, entry):  # -> None:
        ...

def inspect_history(n: int = ...):  # -> None:
    """The global history shared across all LMs."""
    ...
