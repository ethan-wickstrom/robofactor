"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional

logger = ...
class Cache:
    """DSPy Cache

    `Cache` provides 2 levels of caching (in the given order):
        1. In-memory cache - implemented with cachetools.LRUCache
        2. On-disk cache - implemented with diskcache.FanoutCache
    """
    def __init__(self, enable_disk_cache: bool, enable_memory_cache: bool, disk_cache_dir: str, disk_size_limit_bytes: Optional[int] = ..., memory_max_entries: Optional[int] = ...) -> None:
        """
        Args:
            enable_disk_cache: Whether to enable on-disk cache.
            enable_memory_cache: Whether to enable in-memory cache.
            disk_cache_dir: The directory where the disk cache is stored.
            disk_size_limit_bytes: The maximum size of the disk cache (in bytes).
            memory_max_entries: The maximum size of the in-memory cache (in number of items).
        """
        ...
    
    def __contains__(self, key: str) -> bool:
        """Check if a key is in the cache."""
        ...
    
    def cache_key(self, request: Dict[str, Any], ignored_args_for_cache_key: Optional[list[str]] = ...) -> str:
        """
        Obtain a unique cache key for the given request dictionary by hashing its JSON
        representation. For request fields having types that are known to be JSON-incompatible,
        convert them to a JSON-serializable format before hashing.
        """
        ...
    
    def get(self, request: Dict[str, Any], ignored_args_for_cache_key: Optional[list[str]] = ...) -> Any:
        ...
    
    def put(self, request: Dict[str, Any], value: Any, ignored_args_for_cache_key: Optional[list[str]] = ..., enable_memory_cache: bool = ...) -> None:
        ...
    
    def reset_memory_cache(self) -> None:
        ...
    
    def save_memory_cache(self, filepath: str) -> None:
        ...
    
    def load_memory_cache(self, filepath: str) -> None:
        ...
    


def request_cache(cache_arg_name: Optional[str] = ..., ignored_args_for_cache_key: Optional[list[str]] = ..., enable_memory_cache: bool = ..., *, maxsize: Optional[int] = ...): # -> Callable[..., _Wrapped[..., Any, ..., CoroutineType[Any, Any, Any]] | _Wrapped[..., Any, ..., Any]]:
    """
    Decorator for applying caching to a function based on the request argument.

    Args:
        cache_arg_name: The name of the argument that contains the request. If not provided, the entire kwargs is used
            as the request.
        ignored_args_for_cache_key: A list of arguments to ignore when computing the cache key from the request.
        enable_memory_cache: Whether to enable in-memory cache at call time. If False, the memory cache will not be
            written to on new data.
    """
    ...

