"""
This type stub file was generated by pyright.
"""

import logging
import os
import litellm
from pathlib import Path
from typing import Optional
from litellm.caching.caching import Cache as LitellmCache
from dspy.clients.base_lm import BaseLM, inspect_history
from dspy.clients.cache import Cache
from dspy.clients.embedding import Embedder
from dspy.clients.lm import LM
from dspy.clients.provider import Provider, TrainingJob

logger = ...
DISK_CACHE_DIR = ...
DISK_CACHE_LIMIT = ...
def configure_cache(enable_disk_cache: Optional[bool] = ..., enable_memory_cache: Optional[bool] = ..., disk_cache_dir: Optional[str] = ..., disk_size_limit_bytes: Optional[int] = ..., memory_max_entries: Optional[int] = ..., enable_litellm_cache: bool = ...): # -> None:
    """Configure the cache for DSPy.

    Args:
        enable_disk_cache: Whether to enable on-disk cache.
        enable_memory_cache: Whether to enable in-memory cache.
        disk_cache_dir: The directory to store the on-disk cache.
        disk_size_limit_bytes: The size limit of the on-disk cache.
        memory_max_entries: The maximum number of entries in the in-memory cache.
        enable_litellm_cache: Whether to enable LiteLLM cache.
    """
    ...

DSPY_CACHE = ...
if "LITELLM_LOCAL_MODEL_COST_MAP" not in os.environ:
    ...
def enable_litellm_logging(): # -> None:
    ...

def disable_litellm_logging(): # -> None:
    ...

__all__ = ["BaseLM", "LM", "Provider", "TrainingJob", "inspect_history", "Embedder", "enable_litellm_logging", "disable_litellm_logging", "configure_cache"]
