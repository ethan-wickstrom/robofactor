"""
This type stub file was generated by pyright.
"""

from dspy.primitives import Module
from dspy.signatures import Signature

class SemanticRecallPrecision(Signature):
    """
    Compare a system's response to the ground truth to compute its recall and precision.
    If asked to reason, enumerate key ideas in each response, and whether they are present in the other response.
    """
    question: str = ...
    ground_truth: str = ...
    system_response: str = ...
    recall: float = ...
    precision: float = ...


class DecompositionalSemanticRecallPrecision(Signature):
    """
    Compare a system's response to the ground truth to compute recall and precision of key ideas.
    You will first enumerate key ideas in each response, discuss their overlap, and then report recall and precision.
    """
    question: str = ...
    ground_truth: str = ...
    system_response: str = ...
    ground_truth_key_ideas: str = ...
    system_response_key_ideas: str = ...
    discussion: str = ...
    recall: float = ...
    precision: float = ...


def f1_score(precision, recall): # -> float:
    ...

class SemanticF1(Module):
    def __init__(self, threshold=..., decompositional=...) -> None:
        ...
    
    def forward(self, example, pred, trace=...): # -> float | bool:
        ...
    


class AnswerCompleteness(Signature):
    """
    Estimate the completeness of a system's responses, against the ground truth.
    You will first enumerate key ideas in each response, discuss their overlap, and then report completeness.
    """
    question: str = ...
    ground_truth: str = ...
    system_response: str = ...
    ground_truth_key_ideas: str = ...
    system_response_key_ideas: str = ...
    discussion: str = ...
    completeness: float = ...


class AnswerGroundedness(Signature):
    """
    Estimate the groundedness of a system's responses, against real retrieved documents written by people.
    You will first enumerate whatever non-trivial or check-worthy claims are made in the system response, and then
    discuss the extent to which some or all of them can be deduced from the retrieved context and basic commonsense.
    """
    question: str = ...
    retrieved_context: str = ...
    system_response: str = ...
    system_response_claims: str = ...
    discussion: str = ...
    groundedness: float = ...


class CompleteAndGrounded(Module):
    def __init__(self, threshold=...) -> None:
        ...
    
    def forward(self, example, pred, trace=...): # -> float | bool:
        ...
    


