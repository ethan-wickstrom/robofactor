"""
This type stub file was generated by pyright.
"""

from typing import Optional, Type, Union
from dspy.predict.parameter import Parameter
from dspy.primitives.module import Module
from dspy.signatures.signature import Signature
from dspy.utils.callback import BaseCallback

logger = ...
class Predict(Module, Parameter):
    def __init__(self, signature: Union[str, Type[Signature]], callbacks: Optional[list[BaseCallback]] = ..., **config) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def dump_state(self): # -> dict[str, Any]:
        ...
    
    def load_state(self, state: dict) -> Predict:
        """Load the saved state of a `Predict` object.

        Args:
            state: The saved state of a `Predict` object.

        Returns:
            Self to allow method chaining.
        """
        ...
    
    def __call__(self, *args, **kwargs): # -> object | Any:
        ...
    
    async def acall(self, *args, **kwargs): # -> Any:
        ...
    
    def forward(self, **kwargs): # -> Prediction:
        ...
    
    async def aforward(self, **kwargs): # -> Prediction:
        ...
    
    def update_config(self, **kwargs): # -> None:
        ...
    
    def get_config(self): # -> dict[str, Any]:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def serialize_object(obj): # -> dict[str, Any] | list[dict[str, Any] | list[Any] | tuple[dict[str, Any] | list[Any] | tuple[Any, ...] | dict[Any, Any] | Any, ...] | dict[Any, Any] | Any] | tuple[dict[str, Any] | list[Any] | tuple[Any, ...] | dict[Any, Any] | Any, ...] | dict[Any, Any]:
    """
    Recursively serialize a given object into a JSON-compatible format.
    Supports Pydantic models, lists, dicts, and primitive types.
    """
    ...

