"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional
from dspy.predict.predict import Prediction
from dspy.signatures import Signature
from .predict import Module

class OfferFeedback(Signature):
    """
    In the discussion, assign blame to each module that contributed to the final reward being below the threshold, if
    any. Then, prescribe concrete advice of how the module should act on its future input when we retry the process, if
    it were to receive the same or similar inputs. If a module is not to blame, the advice should be N/A.
    The module will not see its own history, so it needs to rely on entirely concrete and actionable advice from you
    to avoid the same mistake on the same or similar inputs.
    """

    program_code: str = ...
    modules_defn: str = ...
    program_inputs: str = ...
    program_trajectory: str = ...
    program_outputs: str = ...
    reward_code: str = ...
    target_threshold: float = ...
    reward_value: float = ...
    module_names: list[str] = ...
    discussion: str = ...
    advice: dict[str, str] = ...

class Refine(Module):
    def __init__(
        self,
        module: Module,
        N: int,
        reward_fn: Callable[[dict, Prediction], float],
        threshold: float,
        fail_count: Optional[int] = ...,
    ) -> None:
        """
        Refines a module by running it up to N times with different temperatures and returns the best prediction.

        This module runs the provided module multiple times with varying temperature settings and selects
        either the first prediction that exceeds the specified threshold or the one with the highest reward.
        If no prediction meets the threshold, it automatically generates feedback to improve future predictions.


        Args:
            module (Module): The module to refine.
            N (int): The number of times to run the module. must
            reward_fn (Callable): The reward function.
            threshold (float): The threshold for the reward function.
            fail_count (Optional[int], optional): The number of times the module can fail before raising an error

        Example:
            ```python
            import dspy

            dspy.settings.configure(lm=dspy.LM("openai/gpt-4o-mini"))

            # Define a QA module with chain of thought
            qa = dspy.ChainOfThought("question -> answer")

            # Define a reward function that checks for one-word answers
            def one_word_answer(args, pred):
                return 1.0 if len(pred.answer.split()) == 1 else 0.0

            # Create a refined module that tries up to 3 times
            best_of_3 = dspy.Refine(module=qa, N=3, reward_fn=one_word_answer, threshold=1.0)

            # Use the refined module
            result = best_of_3(question="What is the capital of Belgium?").answer
            # Returns: Brussels
            ```
        """
        ...

    def forward(self, **kwargs):  # -> None:
        ...

def inspect_modules(program):  # -> str:
    ...
def recursive_mask(
    o,
):  # -> dict[Any, Any | dict[Any, Any] | list[Any | dict[Any, Any] | list[Any] | tuple[Any, ...] | str] | tuple[Any, ...] | str] | list[Any | dict[Any, Any | dict[Any, Any] | list[Any] | tuple[Any, ...] | str] | list[Any] | tuple[Any, ...] | str] | tuple[Any, ...] | str:
    ...
