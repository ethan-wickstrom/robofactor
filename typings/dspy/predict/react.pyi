"""
This type stub file was generated by pyright.
"""

from typing import Callable, TYPE_CHECKING, Type
from dspy.primitives.module import Module
from dspy.signatures.signature import Signature

logger = ...
if TYPE_CHECKING:
    ...
class ReAct(Module):
    def __init__(self, signature: Type[Signature], tools: list[Callable], max_iters: int = ...) -> None:
        """
        ReAct stands for "Reasoning and Acting," a popular paradigm for building tool-using agents.
        In this approach, the language model is iteratively provided with a list of tools and has
        to reason about the current situation. The model decides whether to call a tool to gather more
        information or to finish the task based on its reasoning process. The DSPy version of ReAct is
        generalized to work over any signature, thanks to signature polymorphism.

        Args:
            signature: The signature of the module, which defines the input and output of the react module.
            tools (list[Callable]): A list of functions, callable objects, or `dspy.Tool` instances.
            max_iters (Optional[int]): The maximum number of iterations to run. Defaults to 10.

        Example:

        ```python
        def get_weather(city: str) -> str:
            return f"The weather in {city} is sunny."

        react = dspy.ReAct(signature="question->answer", tools=[get_weather])
        pred = react(question="What is the weather in Tokyo?")
        ```
        """
        ...
    
    def forward(self, **input_args): # -> Prediction:
        ...
    
    async def aforward(self, **input_args): # -> Prediction:
        ...
    
    def truncate_trajectory(self, trajectory):
        """Truncates the trajectory so that it fits in the context window.

        Users can override this method to implement their own truncation logic.
        """
        ...
    


