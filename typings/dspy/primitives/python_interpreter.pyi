"""
This type stub file was generated by pyright.
"""

from os import PathLike
from types import TracebackType
from typing import Any, Dict, List, Optional, Union

class InterpreterError(RuntimeError):
    ...


class PythonInterpreter:
    r"""
    PythonInterpreter that runs code in a sandboxed environment using Deno and Pyodide.

    Prerequisites:
    - Deno (https://docs.deno.com/runtime/getting_started/installation/).

    Example Usage:
    ```python
    code_string = "print('Hello'); 1 + 2"
    with PythonInterpreter() as interp:
        output = interp(code_string) # If final statement is non-None, prints the numeric result, else prints captured output
    ```
    """
    def __init__(self, deno_command: Optional[List[str]] = ..., enable_read_paths: Optional[List[Union[PathLike, str]]] = ..., enable_write_paths: Optional[List[Union[PathLike, str]]] = ..., enable_env_vars: Optional[List[str]] = ..., enable_network_access: Optional[List[str]] = ..., sync_files: bool = ...) -> None:
        """
        Args:
            deno_command: command list to launch Deno.
            enable_read_paths: Files or directories to allow reading from in the sandbox.
            enable_write_paths: Files or directories to allow writing to in the sandbox.
            enable_env_vars: Environment variable names to allow in the sandbox.
            enable_network_access: Domains or IPs to allow network access in the sandbox.
            sync_files: If set, syncs changes within the sandbox back to original files after execution.
        """
        ...
    
    def execute(self, code: str, variables: Optional[Dict[str, Any]] = ...) -> Any:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, _exc_type: Optional[type[BaseException]], _exc_val: Optional[BaseException], _exc_tb: Optional[TracebackType]): # -> None:
        ...
    
    def __call__(self, code: str, variables: Optional[Dict[str, Any]] = ...) -> Any:
        ...
    
    def shutdown(self) -> None:
        ...
    


