"""
This type stub file was generated by pyright.
"""

from typing import Optional
from dspy.primitives.module import BaseModule
from dspy.utils.callback import with_callbacks

class ProgramMeta(type):
    """Metaclass ensuring every ``dspy.Module`` instance is properly initialised."""
    def __call__(cls, *args, **kwargs): ...

class Module(BaseModule, metaclass=ProgramMeta):
    def __init__(self, callbacks=...) -> None: ...
    @with_callbacks
    def __call__(self, *args, **kwargs): ...
    @with_callbacks
    async def acall(self, *args, **kwargs): ...
    def named_predictors(self):  # -> list[tuple[Any, Predict]]:
        ...
    def predictors(self):  # -> list[Predict]:
        ...
    def set_lm(self, lm):  # -> None:
        ...
    def get_lm(self):  # -> LM | None:
        ...
    def __repr__(self):  # -> LiteralString:
        ...
    def map_named_predictors(self, func):  # -> Self:
        """Applies a function to all named predictors."""
        ...

    def inspect_history(self, n: int = ...):  # -> None:
        ...
    def batch(
        self,
        examples,
        num_threads: Optional[int] = ...,
        max_errors: int = ...,
        return_failed_examples: bool = ...,
        provide_traceback: Optional[bool] = ...,
        disable_progress_bar: bool = ...,
    ):  # -> tuple[Any, Any, Any] | List[Any]:
        """
        Processes a list of dspy.Example instances in parallel using the Parallel module.

        Args:
            examples: List of dspy.Example instances to process.
            num_threads: Number of threads to use for parallel processing.
            max_errors: Maximum number of errors allowed before stopping execution.
            return_failed_examples: Whether to return failed examples and exceptions.
            provide_traceback: Whether to include traceback information in error logs.
            disable_progress_bar: Whether to display the progress bar.

        Returns:
            List of results, and optionally failed examples and exceptions.
        """
        ...

def set_attribute_by_name(obj, name, value):  # -> None:
    ...

Program = Module
