"""
This type stub file was generated by pyright.
"""

from dspy.primitives.example import Example

class Prediction(Example):
    """A prediction object that contains the output of a DSPy module.
    
    Prediction inherits from Example.
    
    To allow feedback-augmented scores, Prediction supports comparison operations
    (<, >, <=, >=) for Predictions with a `score` field. The comparison operations
    compare the 'score' values as floats. For equality comparison, Predictions are equal
    if their underlying data stores are equal (inherited from Example).
    
    Arithmetic operations (+, /, etc.) are also supported for Predictions with a 'score'
    field, operating on the score value.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get_lm_usage(self): # -> None:
        ...
    
    def set_lm_usage(self, value): # -> None:
        ...
    
    @classmethod
    def from_completions(cls, list_or_dict, signature=...): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __float__(self): # -> float:
        ...
    
    def __add__(self, other): # -> float:
        ...
    
    def __radd__(self, other): # -> float:
        ...
    
    def __truediv__(self, other): # -> float:
        ...
    
    def __rtruediv__(self, other): # -> float:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    @property
    def completions(self): # -> None:
        ...
    


class Completions:
    def __init__(self, list_or_dict, signature=...) -> None:
        ...
    
    def items(self): # -> dict_items[Any, Any]:
        ...
    
    def __getitem__(self, key): # -> Prediction:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


