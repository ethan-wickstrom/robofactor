"""
This type stub file was generated by pyright.
"""

import dspy
from dspy.propose.propose_base import Proposer

MAX_INSTRUCT_IN_HISTORY = ...
TIPS = ...

class DescribeProgram(dspy.Signature):
    """Below is some pseudo-code for a pipeline that solves tasks with calls to language models. Please describe what type of task this program appears to be designed to solve, and how it appears to work."""

    program_code = ...
    program_example = ...
    program_description = ...

class DescribeModule(dspy.Signature):
    """Below is some pseudo-code for a pipeline that solves tasks with calls to language models. Please describe the purpose of one of the specified module in this pipeline."""

    program_code = ...
    program_example = ...
    program_description = ...
    module = ...
    module_description = ...

def generate_instruction_class(
    use_dataset_summary=...,
    program_aware=...,
    use_task_demos=...,
    use_instruct_history=...,
    use_tip=...,
):  # -> Predict:
    class GenerateSingleModuleInstruction(dspy.Signature):
        """Use the information below to learn about a task that we are trying to solve using calls to an LM, then generate a new instruction that will be used to prompt a Language Model to better solve the task."""

        ...

class GenerateModuleInstruction(dspy.Module):
    def __init__(
        self,
        program_code_string=...,
        use_dataset_summary=...,
        program_aware=...,
        use_task_demos=...,
        use_instruct_history=...,
        use_tip=...,
        verbose=...,
    ) -> None: ...
    def forward(
        self,
        demo_candidates,
        pred_i,
        demo_set_i,
        program,
        previous_instructions,
        data_summary,
        num_demos_in_context=...,
        tip=...,
    ):  # -> Prediction:
        ...

class GroundedProposer(Proposer):
    def __init__(
        self,
        prompt_model,
        program,
        trainset,
        view_data_batch_size=...,
        use_dataset_summary=...,
        program_aware=...,
        use_task_demos=...,
        num_demos_in_context=...,
        use_instruct_history=...,
        use_tip=...,
        set_tip_randomly=...,
        set_history_randomly=...,
        verbose=...,
        rng=...,
    ) -> None: ...
    def propose_instructions_for_program(
        self, trainset, program, demo_candidates, trial_logs, N, T
    ) -> list[str]:
        """This method is responsible for returning the full set of new instructions for our program, given the specified criteria."""
        ...

    def propose_instruction_for_predictor(
        self, program, predictor, pred_i, T, demo_candidates, demo_set_i, trial_logs, tip=...
    ) -> str:
        """This method is responsible for returning a single instruction for a given predictor, using the specified criteria."""
        ...
