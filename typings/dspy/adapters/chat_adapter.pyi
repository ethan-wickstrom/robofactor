"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, NamedTuple, Optional, Type
from pydantic.fields import FieldInfo
from dspy.adapters.base import Adapter
from dspy.clients.lm import LM
from dspy.signatures.signature import Signature
from dspy.utils.callback import BaseCallback

field_header_pattern = ...

class FieldInfoWithName(NamedTuple):
    name: str
    info: FieldInfo
    ...

class ChatAdapter(Adapter):
    def __init__(self, callbacks: Optional[list[BaseCallback]] = ...) -> None: ...
    def __call__(
        self,
        lm: LM,
        lm_kwargs: dict[str, Any],
        signature: Type[Signature],
        demos: list[dict[str, Any]],
        inputs: dict[str, Any],
    ) -> list[dict[str, Any]]: ...
    def format_field_description(self, signature: Type[Signature]) -> str: ...
    def format_field_structure(self, signature: Type[Signature]) -> str:
        """
        `ChatAdapter` requires input and output fields to be in their own sections, with section header using markers
        `[[ ## field_name ## ]]`. An arbitrary field `completed` ([[ ## completed ## ]]) is added to the end of the
        output fields section to indicate the end of the output fields.
        """
        ...

    def format_task_description(self, signature: Type[Signature]) -> str: ...
    def format_user_message_content(
        self,
        signature: Type[Signature],
        inputs: dict[str, Any],
        prefix: str = ...,
        suffix: str = ...,
        main_request: bool = ...,
    ) -> str: ...
    def user_message_output_requirements(self, signature: Type[Signature]) -> str:
        """Returns a simplified format reminder for the language model.

        In chat-based interactions, language models may lose track of the required output format
        as the conversation context grows longer. This method generates a concise reminder of
        the expected output structure that can be included in user messages.

        Args:
            signature (Type[Signature]): The DSPy signature defining the expected input/output fields.

        Returns:
            str: A simplified description of the required output format.

        Note:
            This is a more lightweight version of `format_field_structure` specifically designed
            for inline reminders within chat messages.
        """
        ...

    def format_assistant_message_content(
        self, signature: Type[Signature], outputs: dict[str, Any], missing_field_message=...
    ) -> str: ...
    def parse(self, signature: Type[Signature], completion: str) -> dict[str, Any]: ...
    def format_field_with_value(self, fields_with_values: Dict[FieldInfoWithName, Any]) -> str:
        """
        Formats the values of the specified fields according to the field's DSPy type (input or output),
        annotation (e.g. str, int, etc.), and the type of the value itself. Joins the formatted values
        into a single string, which is is a multiline string if there are multiple fields.

        Args:
            fields_with_values: A dictionary mapping information about a field to its corresponding
                value.

        Returns:
            The joined formatted values of the fields, represented as a string
        """
        ...

    def format_finetune_data(
        self,
        signature: Type[Signature],
        demos: list[dict[str, Any]],
        inputs: dict[str, Any],
        outputs: dict[str, Any],
    ) -> dict[str, list[Any]]:
        """
        Format the call data into finetuning data according to the OpenAI API specifications.

        For the chat adapter, this means formatting the data as a list of messages, where each message is a dictionary
        with a "role" and "content" key. The role can be "system", "user", or "assistant". Then, the messages are
        wrapped in a dictionary with a "messages" key.
        """
        ...
