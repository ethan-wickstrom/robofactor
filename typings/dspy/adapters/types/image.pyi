"""
This type stub file was generated by pyright.
"""

import pydantic
from typing import Any, Union
from dspy.adapters.types.base_type import BaseType
from PIL import Image as PILImage

PIL_AVAILABLE = ...

class Image(BaseType):
    url: str
    model_config = ...
    def format(self) -> Union[list[dict[str, Any]], str]: ...
    @pydantic.model_validator(mode="before")
    @classmethod
    def validate_input(cls, values):  # -> dict[str, str] | dict[Any, Any] | dict[str, Any]:
        ...
    @classmethod
    def from_url(cls, url: str, download: bool = ...):  # -> Self:
        ...
    @classmethod
    def from_file(cls, file_path: str):  # -> Self:
        ...
    @classmethod
    def from_PIL(cls, pil_image):  # -> Self:
        ...
    def __str__(self) -> str: ...
    def __repr__(self):  # -> str:
        ...

def is_url(string: str) -> bool:
    """Check if a string is a valid URL."""
    ...

def encode_image(
    image: Union[str, bytes, PILImage.Image, dict], download_images: bool = ...
) -> str:
    """
    Encode an image or file to a base64 data URI.

    Args:
        image: The image or file to encode. Can be a PIL Image, file path, URL, or data URI.
        download_images: Whether to download images from URLs.

    Returns:
        str: The data URI of the file or the URL if download_images is False.

    Raises:
        ValueError: If the file type is not supported.
    """
    ...

def is_image(obj) -> bool:
    """Check if the object is an image or a valid media file reference."""
    ...
