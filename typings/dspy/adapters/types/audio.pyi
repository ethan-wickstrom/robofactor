"""
This type stub file was generated by pyright.
"""

import pydantic
from typing import Any, Union
from dspy.adapters.types.base_type import BaseType

SF_AVAILABLE = ...

class Audio(BaseType):
    data: str
    audio_format: str
    model_config = ...
    def format(self) -> list[dict[str, Any]]: ...
    @pydantic.model_validator(mode="before")
    @classmethod
    def validate_input(cls, values: Any) -> Any:
        """
        Validate input for Audio, expecting 'data' and 'format' keys in dictionary.
        """
        ...

    @classmethod
    def from_url(cls, url: str) -> Audio:
        """
        Download an audio file from URL and encode it as base64.
        """
        ...

    @classmethod
    def from_file(cls, file_path: str) -> Audio:
        """
        Read local audio file and encode it as base64.
        """
        ...

    @classmethod
    def from_array(cls, array: Any, sampling_rate: int, format: str = ...) -> Audio:
        """
        Process numpy-like array and encode it as base64. Uses sampling rate and audio format for encoding.
        """
        ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

def encode_audio(
    audio: Union[str, bytes, dict, Audio, Any], sampling_rate: int = ..., format: str = ...
) -> dict:
    """
    Encode audio to a dict with 'data' and 'format'.

    Accepts: local file path, URL, data URI, dict, Audio instance, numpy array, or bytes (with known format).
    """
    ...
