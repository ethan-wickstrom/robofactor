"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Type
from dspy.adapters.chat_adapter import ChatAdapter, FieldInfoWithName
from dspy.clients.lm import LM
from dspy.signatures.signature import Signature

logger = ...

class JSONAdapter(ChatAdapter):
    def __call__(
        self,
        lm: LM,
        lm_kwargs: dict[str, Any],
        signature: Type[Signature],
        demos: list[dict[str, Any]],
        inputs: dict[str, Any],
    ) -> list[dict[str, Any]]: ...
    def format_field_structure(self, signature: Type[Signature]) -> str: ...
    def user_message_output_requirements(self, signature: Type[Signature]) -> str: ...
    def format_assistant_message_content(
        self, signature: Type[Signature], outputs: dict[str, Any], missing_field_message=...
    ) -> str: ...
    def parse(self, signature: Type[Signature], completion: str) -> dict[str, Any]: ...
    def format_field_with_value(
        self, fields_with_values: Dict[FieldInfoWithName, Any], role: str = ...
    ) -> str:
        """
        Formats the values of the specified fields according to the field's DSPy type (input or output),
        annotation (e.g. str, int, etc.), and the type of the value itself. Joins the formatted values
        into a single string, which is a multiline string if there are multiple fields.

        Args:
            fields_with_values: A dictionary mapping information about a field to its corresponding value.
        Returns:
            The joined formatted values of the fields, represented as a string.
        """
        ...

    def format_finetune_data(
        self,
        signature: Type[Signature],
        demos: list[dict[str, Any]],
        inputs: dict[str, Any],
        outputs: dict[str, Any],
    ) -> dict[str, list[Any]]: ...
