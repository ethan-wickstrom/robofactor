"""
This type stub file was generated by pyright.
"""

from typing import Any, Union
from pydantic.fields import FieldInfo

def serialize_for_json(value: Any) -> Any:
    """
    Formats the specified value so that it can be serialized as a JSON string.

    Args:
        value: The value to format as a JSON string.
    Returns:
        The formatted value, which is serializable as a JSON string.
    """
    ...

def format_field_value(field_info: FieldInfo, value: Any, assume_text=...) -> Union[str, dict]:
    """
    Formats the value of the specified field according to the field's DSPy type (input or output),
    annotation (e.g. str, int, etc.), and the type of the value itself.

    Args:
      field_info: Information about the field, including its DSPy field type and annotation.
      value: The value of the field.
    Returns:
      The formatted value of the field, represented as a string.
    """
    ...

def translate_field_type(field_name, field_info):  # -> str:
    ...
def find_enum_member(enum, identifier):
    """
    Finds the enum member corresponding to the specified identifier, which may be the
    enum member's name or value.

    Args:
        enum: The enum to search for the member.
        identifier: If the enum is explicitly-valued, this is the value of the enum member to find.
                    If the enum is auto-valued, this is the name of the enum member to find.
    Returns:
        The enum member corresponding to the specified identifier.
    """
    ...

def parse_value(value, annotation):  # -> str | EnumMeta:
    ...
def get_annotation_name(annotation):  # -> str:
    ...
def get_field_description_string(fields: dict) -> str: ...
